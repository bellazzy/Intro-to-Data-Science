{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "248ad18c",
   "metadata": {},
   "source": [
    "# Homework 1\n",
    "### Introduction to Data Science EN.553.436/EN.553.636 - Fall 2021\n",
    "\n",
    "Due date: Wednesday, September 22 at midnight."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "179ab7dc",
   "metadata": {},
   "source": [
    "## Guidelines\n",
    "* Answer in the cells immediately below the problem statements. If a problem calls for code, a code cell will follow. If a problem calls for a text response, a Markdown cell will follow.\n",
    "* Your code should include some comments. Insufficient commentary may result in loss of points. But you do not necessarily need to comment every line or problem. Further guidelines:\n",
    "    - If the the meaning of some line of code would be obvious to the average Python novice, you do not need to comment (e.g., you do not need to comment _import numpy_). \n",
    "    - If your code is moderately complex, you should comment (e.g., if you nest several functions in one line, you should comment). \n",
    "    - It may be proper to comment before a code block to describe generally what you are doing (e.g., you should comment before a function definition to explain the function and its parameters)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cb62d85",
   "metadata": {},
   "source": [
    "# Problem 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a7afdc9",
   "metadata": {},
   "source": [
    "## 1.1\n",
    "Load the _lowbwt_ dataset from the OpenML repository as a Pandas DataFrame from following URL: https://www.openml.org/data/get_csv/3640/dataset_2189_lowbwt.arff. Use a function that is able to handle loading the data directly into Jupyter from the URL. The function should take the URL as an argument. **Do not load the data using a filepath on your hard drive:** again, load the data directly into Jupyter using the URL.\n",
    "\n",
    "Print the loaded DataFrame. Read the [description](https://www.openml.org/d/203) of the dataset to better understand it. Check the column names and values to see if they match the variables discussed in the description. One or more variables may have been renamed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "c9da2e01",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Module for arrays.\n",
    "import numpy as np\n",
    "# Module for dataframe manipulation.\n",
    "import pandas as pd\n",
    "# Function for downloading from URLs.\n",
    "from urllib import request "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "4879873e-a858-4f74-8444-f130a827fc14",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     LOW  AGE  LWT  RACE  SMOKE  PTL  HT  UI  FTV  class\n",
      "0      0   19  182     2      0    0   0   1    0   2523\n",
      "1      0   33  155     3      0    0   0   0    3   2551\n",
      "2      0   20  105     1      1    0   0   0    1   2557\n",
      "3      0   21  108     1      1    0   0   1    2   2594\n",
      "4      0   18  107     1      1    0   0   1    0   2600\n",
      "..   ...  ...  ...   ...    ...  ...  ..  ..  ...    ...\n",
      "184    1   28   95     1      1    0   0   0    2   2466\n",
      "185    1   14  100     3      0    0   0   0    2   2495\n",
      "186    1   23   94     3      1    0   0   0    0   2495\n",
      "187    1   17  142     2      0    0   1   0    0   2495\n",
      "188    1   21  130     1      1    0   1   0    3   2495\n",
      "\n",
      "[189 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "data1=pd.read_csv('https://www.openml.org/data/get_csv/3640/dataset_2189_lowbwt.arff')\n",
    "print(data1)\n",
    "#birth weight is class in the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "571d8bdc",
   "metadata": {},
   "source": [
    "## 1.2\n",
    "From the full DataFrame, extract and print a DataFrame with the birthweight column (and only the birthweight column) for mothers who smoked during pregnancy and had low-birthweight deliveries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "a05a95f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "130     709\n",
       "132    1135\n",
       "139    1790\n",
       "140    1818\n",
       "141    1885\n",
       "144    1928\n",
       "145    1928\n",
       "147    1936\n",
       "152    2084\n",
       "153    2084\n",
       "155    2125\n",
       "156    2126\n",
       "157    2187\n",
       "159    2211\n",
       "160    2225\n",
       "164    2296\n",
       "165    2296\n",
       "168    2353\n",
       "170    2367\n",
       "171    2381\n",
       "172    2381\n",
       "175    2410\n",
       "176    2410\n",
       "177    2414\n",
       "178    2424\n",
       "182    2466\n",
       "183    2466\n",
       "184    2466\n",
       "186    2495\n",
       "188    2495\n",
       "Name: class, dtype: int64"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "partial = (data1[\"LOW\"]==1)&(data1[\"SMOKE\"]==1)\n",
    "output1 = data1[partial][\"class\"]\n",
    "#the output is for low birthweight babies with mother who smoked during pregnancy\n",
    "output1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05b58d44",
   "metadata": {},
   "source": [
    "## 1.3\n",
    "Print the following statistics for the birthweights in the original full dataset:\n",
    "- Standard deviation\n",
    "- 0.16 Quantile\n",
    "- Mean\n",
    "- Median\n",
    "- 0.84 Quantile\n",
    "\n",
    "Afterwards, print the same statistics for the birthweights in the subset you selected in 1.2."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "cbd9adef",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The statistics for the birthweights in the original full dataset\n",
      "\n",
      "std: 729.0224168601321, 0.16 quantile: 2226.2, mean: 2944.6560846560847, median: 2977.0, 0.84 quantile: 3695.1599999999994\n"
     ]
    }
   ],
   "source": [
    "# def a function to calculate all the statistics\n",
    "def statistics(dataframe):\n",
    "    std = dataframe.std()\n",
    "    mean = dataframe.mean()\n",
    "    quantiles = dataframe.quantile([0.16,0.5,0.84])\n",
    "    print(\"std: {}, 0.16 quantile: {}, mean: {}, median: {}, 0.84 quantile: {}\".\n",
    "          format(std, quantiles[0.16], mean, quantiles[0.5], quantiles[0.84]))\n",
    "origin_birthweight = data[\"class\"]\n",
    "print(\"The statistics for the birthweights in the original full dataset\\n\")\n",
    "statistics(origin_birthweight)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "e17710ea-0676-4575-90f8-3b3f29caac8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The statistics for the birthweights in the original full dataset\n",
      "\n",
      "std: 399.8074090956996, 0.16 quantile: 1912.52, mean: 2143.0333333333333, median: 2260.5, 0.84 quantile: 2439.12\n"
     ]
    }
   ],
   "source": [
    "#Statistics for low birthweight babies with mother who smoked during pregnancy\n",
    "print(\"The statistics for the birthweights in the original full dataset\\n\")\n",
    "statistics(output1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "161ecee4",
   "metadata": {},
   "source": [
    "## 1.4\n",
    "Plot two density histograms: one for the birthweights in the full dataset, and one for the birthweights in the subset you selected in 1.2. Label the histograms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "f5963a5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'data')"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(origin_birthweight,bins=20)\n",
    "plt.title('Histograms for the birthweights in the full dataset')\n",
    "plt.xlabel(\"original birthweight\")\n",
    "plt.ylabel(\"data\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "ae6aeece-2dad-4ab1-b130-93c2555473ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'data')"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(output1,bins=20)\n",
    "plt.title('Histograms for the birthweights in the subset selected in 1.2.')\n",
    "plt.xlabel(\"mothers who smoked during pregnancy and had low-birthweight\")\n",
    "plt.ylabel(\"data\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19d2b9c2",
   "metadata": {},
   "source": [
    "## 1.5\n",
    "Is a normal distribution a plausible model for birthweight in either of the two datasets? Back up your answer using the previous results. This image of a normal PDF may be useful:\n",
    "\n",
    "\n",
    "![Normal PDF](bell-curve.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6fd116e",
   "metadata": {},
   "source": [
    "### _Answer: The normal distribution is plausible model for birthweight with original dataset, since symmetric about the mean around 2944. While for the subset of mothers who smoked during pregnancy and had low-birthweight, we can see from the histogram that it does not follow a normal distribution. The distribution of birthweight is this case is kind of scattered and left skewed."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d44b6864",
   "metadata": {},
   "source": [
    "# Problem 2\n",
    "In this exercise, we will proceed in steps to perform rejection sampling of a [beta random variable](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.beta.html) using a [triangular random variable](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.triang.html) as candidate."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6887a8e",
   "metadata": {},
   "source": [
    "## 2.1\n",
    "Plot an overlay of a beta PDF and a triangular PDF with the following parameters:\n",
    "- For the beta PDF, a=2, b=2, loc=0, scale=1.\n",
    "- For the triangular PDF, c=0.50, loc=0, scale=1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "c05ce113-7904-4b10-a409-6649919cccc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import beta\n",
    "from scipy.stats import triang"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "e67959e5-670c-45f0-8dd2-0bafa98d9b5d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 1)\n",
    "\n",
    "#beta PDF\n",
    "a,b,loc,scale=2,2,0,1\n",
    "x = np.linspace(beta.ppf(0.01, a, b),beta.ppf(0.99, a, b), 100)\n",
    "ax.plot(x, beta.pdf(x, a, b),'r-', lw=5, alpha=0.6, label='beta pdf')\n",
    "\n",
    "#triangular PDF\n",
    "c,loc,scale=0.5,0,1\n",
    "x = np.linspace(triang.ppf(0.01, c),triang.ppf(0.99, c), 100)\n",
    "ax.plot(x, triang.pdf(x, c),'b-', lw=5, alpha=0.6, label='triang pdf')\n",
    "\n",
    "ax.legend(loc='best', frameon=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc2eaa1e",
   "metadata": {},
   "source": [
    "## 2.2\n",
    "We will perform 10,000 trials of the rejection sampling procedure. Simulate and store 10,000 random variables distributed as $\\text{Uniform}[0,1]$ using random state 436. Simulate and store 10,000 triangular random variables from the specified triangular distribution using random state 636."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "177f2a49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 10,000 random variables distributed as  Uniform[0,1]\n",
    "np.random.seed(436)\n",
    "uniforms = np.random.uniform(low=0.0, high=1.0, size=10000)\n",
    "\n",
    "# 10,000 triangular random variables\n",
    "np.random.seed(636)\n",
    "triangulars = np.random.triangular(0, 0.5, 1, size = 10000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c073366a",
   "metadata": {},
   "source": [
    "## 2.3\n",
    "Let $f$ be the beta PDF and $g$ the triangular PDF. Using 1.50 as an estimate of $\\sup f/g$, generate samples from the beta distribution by rejection sampling. Store your samples. Print the number of samples you obtain."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "9dada35e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of samples saved for beta: 6674\n"
     ]
    }
   ],
   "source": [
    "# rejection sampling\n",
    "\n",
    "saved_beta_samples = []\n",
    "for i in range(10000):\n",
    "    # sample from the triangular distribution\n",
    "    sample_tri = triangulars[i]\n",
    "    # uniform sampling from [0, 1.5 * g(sample_tri)]\n",
    "    sample_uniform = 1.5 * triang.pdf(sample_tri, c, loc = 0, scale = 1) * uniforms[i]\n",
    "    if sample_uniform < beta.pdf(sample_tri, a, b, loc = 0, scale = 1):\n",
    "        saved_beta_samples.append(sample_tri)\n",
    "        \n",
    "print(\"number of samples saved for beta: {}\".format(len(saved_beta_samples)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad73a593",
   "metadata": {},
   "source": [
    "## 2.4\n",
    "Plot a density histogram of your samples overlaid with the beta and triangular PDFs. Use 100 bins."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "163ec994",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 1)\n",
    "# for triangular pdf\n",
    "c = 0.50\n",
    "x = np.linspace(0, 1, 100)\n",
    "ax.plot(x, 1.5 * triang.pdf(x, c, loc = 0, scale = 1), 'r-', lw=5, alpha=0.6, label='1.5 x triangular pdf')\n",
    "\n",
    "# for beta pdf\n",
    "a, b = 2, 2\n",
    "ax.plot(x, beta.pdf(x, a, b, loc = 0, scale = 1), 'b-', lw=5, alpha=0.6, label='beta pdf')\n",
    "\n",
    "plt.hist(saved_beta_samples,bins=100, density=True, edgecolor='black', label = \"density histogram\")\n",
    "\n",
    "ax.legend(loc='best', frameon=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ba687088",
   "metadata": {},
   "source": [
    "# Problem 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "abd0a313",
   "metadata": {},
   "source": [
    "## 3.1\n",
    "The Epanechnikov kernel is defined by\n",
    "$$K(u) = \\frac{3}{4}\\left(1 - u^{2}\\right)\\qquad\\text{for }\\lvert u \\rvert \\leq 1$$\n",
    "Perform Epanechnikov kernel density estimation on 1,000 simulated samples from a [lognormal distribution](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.lognorm.html) with s=1 and random state 636. Use a bandwidth of 2.0. Plot the density estimate over the support of the lognormal distribution. (You can use 2 times the maximum of your samples as an upper bound for the support.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "f5c81232-bd6b-4a28-a12c-ef469f093ab4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 1,000 simulated samples from a lognormal distribution\n",
    "np.random.seed(636)\n",
    "lognormals = np.random.lognormal(mean = 0, sigma = 1, size = 1000)\n",
    "\n",
    "def Epanechnikov_kernel_density(x0):\n",
    "    bias = (lognormals - x0) / 2.0\n",
    "    bias_cliped = np.clip(bias, -1, 1)\n",
    "    kernel = 0.75 * (1 - bias_cliped ** 2)\n",
    "    return kernel.sum() / (2 * len(lognormals))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "bc6e7b94-bb77-4a39-b478-71cff88e6d8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "support = np.sort(lognormals)\n",
    "predict_density = np.zeros(1000)\n",
    "for idx in range(1000):\n",
    "    predict_density[idx] = Epanechnikov_kernel_density(support[idx])\n",
    "    \n",
    "# the PDF must be normalized\n",
    "predict_density /= scipy.integrate.trapz(predict_density, support)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "5243647b-22f1-4e13-85db-f596f8c625f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 1)\n",
    "\n",
    "ax.plot(support, predict_density, 'r-', lw=5, alpha=0.6, label='estimate density')\n",
    "plt.hist(lognormals,bins=100, density=True, edgecolor='black', label = \"density histogram\")\n",
    "\n",
    "ax.legend(loc='best', frameon=False)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b8d1e35",
   "metadata": {},
   "source": [
    "## 3.2\n",
    "Test whether the estimate integrates to unity over the support of the lognormal distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "09bd0888",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scipy.integrate.trapz(predict_density, support)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "293ce053",
   "metadata": {},
   "source": [
    "## 3.3\n",
    "Explain the results of your integration."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86b7071e",
   "metadata": {},
   "source": [
    "### _Answer:_As the density was estimated on finite sampled data, the integration will be smaller than 1. Thus we have to normalize it by scipy.integrate.trapz"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "466f585d",
   "metadata": {},
   "source": [
    "# Problem 4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "430da839",
   "metadata": {},
   "source": [
    "## 4.1\n",
    "Below we load the [Boston house prices dataset](https://scikit-learn.org/stable/datasets/toy_dataset.html#boston-dataset). We also store the labels of the predictor variables for you.\n",
    "\n",
    "Our goal will be to predict house price (MEDV) by regression. Split the dataset into a training and test set using 1/3 as the test size and a random state of 553. Use the function [_train_test_split_](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html) from _sklearn.model_selection_ for this purpose."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "a5ceade1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading data:\n",
    "\n",
    "# Import function for loading the 'boston' dataset.\n",
    "from sklearn.datasets import load_boston\n",
    "# Load a 'bunch' containing data and descriptions.\n",
    "boston_bunch = load_boston()\n",
    "# Extract and store predictor variables.\n",
    "X = boston_bunch.data\n",
    "# Extract and store the variable that is the target for prediction.\n",
    "y = boston_bunch.target\n",
    "# Extract and store labels of predictor variables.\n",
    "labels = boston_bunch.feature_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "3c6be9d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Your code:\n",
    "labels\n",
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1 / 3, random_state=553)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dabfc03",
   "metadata": {},
   "source": [
    "## 4.2\n",
    "Fit three different linear models on the training set by ordinary least squares (OLS): \n",
    "- A model using all predictor variables.\n",
    "- A model using only AGE, NOX, DIS, and RAD as predictor variables.\n",
    "- A model using all polynomial combinations of degree $\\leq 2$ of the original thirteen predictor variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "b1cea95b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "7782e2fa-42ad-4a2d-9003-a8580fb19102",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_all_variables = linear_model.LinearRegression()\n",
    "model_all_variables.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "2840589c-1ec3-4613-a91a-d1cf642726b3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# get  AGE, NOX, DIS, and RAD as sub variables.\n",
    "X_train_sub = X_train[:, [6, 4, 7, 8]]\n",
    "model_four_variables = linear_model.LinearRegression()\n",
    "model_four_variables.fit(X_train_sub, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "bd16436c-b996-4033-89f8-6857d398fc96",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "# augment the features with PolynomialFeatures\n",
    "transformed_data = PolynomialFeatures(2).fit_transform(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "2345770b-37ba-41ff-b5b8-2e738948c6d6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_poly = linear_model.LinearRegression()\n",
    "model_poly.fit(transformed_data, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a6870645",
   "metadata": {},
   "source": [
    "## 4.3\n",
    "For model assessment, print the following for each of the three models:\n",
    "- The $R^{2}$ of the predictions on the training set.\n",
    "- The $R^{2}$ of the predictions on the test set.\n",
    "- Predicted MEDV for the first five sample points in the test set.\n",
    "- True MEDV for the first five sample points in the test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "fa2770b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R_square of the predictions on the training set for each of the three models\n",
      "\n",
      "model_all_variables: 0.6957079798569403, model_four_variables: -1.5522962215797982, model_poly: 0.9050534733715457\n"
     ]
    }
   ],
   "source": [
    "print(\"The R_square of the predictions on the training set for each of the three models\\n\")\n",
    "print(\"model_all_variables: {}, model_four_variables: {}, model_poly: {}\".format\n",
    "      (r2_score(model_all_variables.predict(X_train), y_train), \n",
    "     r2_score(model_four_variables.predict(X_train_sub), y_train), \n",
    "       r2_score(model_poly.predict(transformed_data), y_train)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "8eb7a84b-5ec6-4555-8cd0-52eb2364e464",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R_square of the predictions on the test set for each of the three models\n",
      "\n",
      "model_all_variables: 0.564687499531662, model_four_variables: -2.0486276859662476, model_poly: 0.7530719079627546\n"
     ]
    }
   ],
   "source": [
    "X_test_sub = X_test[:, [6, 4, 7, 8]]\n",
    "transformed_test_data = PolynomialFeatures(2).fit_transform(X_test)\n",
    "print(\"The R_square of the predictions on the test set for each of the three models\\n\")\n",
    "print(\"model_all_variables: {}, model_four_variables: {}, model_poly: {}\".format\n",
    "      (r2_score(model_all_variables.predict(X_test), y_test), \n",
    "     r2_score(model_four_variables.predict(X_test_sub), y_test), \n",
    "       r2_score(model_poly.predict(transformed_test_data), y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "fcaf4eea-69ef-4aa1-a9a3-061a3e25af5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Predicted MEDV for the first five sample points in the test set.\n",
      "\n",
      "model_all_variables: [24.2652595  12.11746393 27.67012303 24.11419114 21.83525384]\n",
      "model_four_variables: [27.88749751 15.41806533 25.36918791 24.09219392 26.37783049]\n",
      "model_poly: [25.04007101  9.51745439 31.16530704 17.5032692  22.02355266]\n"
     ]
    }
   ],
   "source": [
    "print(\"The Predicted MEDV for the first five sample points in the test set.\\n\")\n",
    "print(\"model_all_variables: {}\\nmodel_four_variables: {}\\nmodel_poly: {}\".format\n",
    "      (model_all_variables.predict(X_test)[:5],                                                                              \n",
    "       model_four_variables.predict(X_test_sub)[:5],                                                                         \n",
    "       model_poly.predict(transformed_test_data)[:5]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "16de735f-dcc8-422e-92bd-2186f8e3c0a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True MEDV for the first five sample points in the test set: [24.6  5.6 27.1 21.9 20. ]\n"
     ]
    }
   ],
   "source": [
    "print(\"True MEDV for the first five sample points in the test set: {}\".format(y_test[:5]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1616690",
   "metadata": {},
   "source": [
    "## 4.4\n",
    "Comment on your results in 4.3, which model do you think is the best? Explain you answer."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "718c0a15",
   "metadata": {},
   "source": [
    "### _Answer:_As the relationship between the target and predictor variables is not linear, poly regression performs best. Besides, using only a few features for linear regression is not enough."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf8555dd",
   "metadata": {},
   "source": [
    "## 4.5\n",
    "Consider the linear regression model using all original features you built above. Holding all other variables equal, what effect does the model predict that an increase in 0.1 parts per 10 million nitric oxide concentration in a place will have on the median value of of owner-occupied homes in that place? Write code that will return and print the answer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "b5b653ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.10039735e-01,  4.87028995e-02,  6.02131092e-02,  2.40773435e+00,\n",
       "       -1.64963662e+01,  4.06242179e+00,  1.51806513e-02, -1.24182217e+00,\n",
       "        3.73125343e-01, -1.53000833e-02, -9.39645782e-01,  1.01952518e-02,\n",
       "       -5.42301337e-01])"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_all_variables.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "f30445aa-1a28-4c65-bef6-bbee59d3691b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It will increase by value -1.6496366216182925\n"
     ]
    }
   ],
   "source": [
    "print(\"It will increase by value {}\".format(model_all_variables.coef_[4] * 0.1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "abe42fc5-a602-4c91-9418-8c68ce8e6122",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
